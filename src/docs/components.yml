components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin, superAdmin]
        employee:
          type: string
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
        employee: 5ebac534954b54139806c112

    Vehicle:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    Employee:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        email:
          $ref: '#/components/schemas/Email'
        dob:
          type: date
        doj:
          type: data
        location:
          $ref: '#/components/schemas/Location'
        telephone:
          $ref: '#/components/schemas/Telephone'
        user:
          type: string
        designation:
          type: string
        department:
          type: string
        branch:
          type: string

    Company:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        abbreviation:
          type: string
        website:
          type: string
        telephone:
          type: date
        fax:
          type: string
        email:
          type: string
        date:
          type: date

    Location:
      type: object
      properties:
        city:
          type: string
        subCity:
          type: string
        wereda:
          type: string
        kebele:
          type: string
        houseNo:
          type: string

    Telephone:
      type: object
      properties:
        mobile:
          type: string
        office:
          type: string

    Email:
      type: object
      properties:
        personal:
          type: string
        office:
          type: string

    Branch:
      type: object
      properties:
        id:
          type: string
        branchManager:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        telephone:
          $ref: '#/components/schemas/Telephone'
        email:
          $ref: '#/components/schemas/Email'
        type:
          type: string
          enum: [Supermarket, Inventory, Warehouse]

    Department:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        head:
          type: string
        description:
          type: string

    Notification:
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        role:
          type: string

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
